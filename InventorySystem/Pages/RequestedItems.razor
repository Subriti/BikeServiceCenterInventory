@page "/request-items"

<nav class="navbar navbar-light bg-light justify-content-between">
    <p style="float: left;  font-size: 1.1rem;">
        <span class="oi oi-eye" /> View Inventory Logs for the month of

        @*    displaying each item of the list as options*@
        <select id="arrMonth" @bind="_selectedMonth" @oninput="StartItemSearch">
            <option value="" disabled selected hidden>-- Select a month --</option>
            @foreach (var month in monthsList)
            {
                <option value="@month"> @month</option>
            }
        </select>
    </p>

    @* OpenAddItemDialog displays dialog box for adding the item log and binding the required data*@
    <button class="btn btn-primary" type="button" @onclick="OpenAddItemLogDialog">
        <span class="oi oi-wrench" /> Request
    </button>
</nav>
<br />

@*Creating a table and defining its row and headers*@
<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    <input type="search" class="form-control search" placeholder="Search" @oninput="SearchTaskName" />
                    <a class='btn text-@(_sortBy == "itemName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("itemName")'>
                        <span class='oi oi-sort-@(_sortBy == "itemName" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Quantity
                    <a class='btn text-@(_sortBy == "quantity" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("quantity")'>
                        <span class='oi oi-sort-@(_sortBy == "quantity" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Approved By
                    <a class='btn text-@(_sortBy == "approvedBy" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("approvedBy")'>
                        <span class='oi oi-sort-@(_sortBy == "approvedBy" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Taken By
                    <a class='btn text-@(_sortBy == "takenBy" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("takenBy")'>
                        <span class='oi oi-sort-@(_sortBy == "takenBy" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Taken Out At
                    <a class='btn text-@(_sortBy == "takenOutAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("takenOutAt")'>
                        <span class='oi oi-sort-@(_sortBy == "takenOutAt" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
        </tr>
    </thead>
    <tbody>
        @{
            //initialising inventoryLogList with all the JSON data
            IEnumerable<InventoryLog> inventoryLogList = _logs;

            if (_selectedMonth != "" && searchTerm == "")
            {
                //storing the sorted monthyly data in _logsSortedByMonth
                _logsSortedByMonth = InventoryLogService.GetAllByMonth(_selectedMonth);

                //updating inventoryLogList data with the sorted data from _logsSortedByMonth
                inventoryLogList = _logsSortedByMonth;
            }

            if (_sortBy == "itemName")
            {
                //sorting the data by itemName and storing into the inventoryLogList
                inventoryLogList = _sortDirection == "ascending" ? inventoryLogList.OrderBy(t => t.ItemName) : inventoryLogList.OrderByDescending(t =>
                t.ItemName);
            }
            else if (_sortBy == "quantity")
            {
                //sorting the data by quantity and storing into the inventoryLogList
                inventoryLogList = _sortDirection == "ascending" ? inventoryLogList.OrderBy(t => t.Quantity) : inventoryLogList.OrderByDescending(t =>
                t.Quantity);
            }
            else if (_sortBy == "approvedBy")
            {
                //sorting the data by ApprovedBy and storing into the inventoryLogList
                inventoryLogList = _sortDirection == "ascending" ? inventoryLogList.OrderBy(t => t.ApprovedBy) : inventoryLogList.OrderByDescending(t =>
                t.ApprovedBy);
            }
            else if (_sortBy == "takenBy")
            {
                //sorting the data by TakenBy and storing into the inventoryLogList
                inventoryLogList = _sortDirection == "ascending" ? inventoryLogList.OrderBy(t => t.TakenBy) : inventoryLogList.OrderByDescending(t =>
                t.TakenBy);
            }
            else if (_sortBy == "takenOutAt")
            {
                //sorting the data by TakenOutAt and storing into the inventoryLogList
                inventoryLogList = _sortDirection == "ascending" ? inventoryLogList.OrderBy(t => t.TakenOutAt) : inventoryLogList.OrderByDescending(t =>
                t.TakenOutAt);
            }

            //looping over each item in the inventoryLogList to display each data
            foreach (var itemLog in inventoryLogList)
            {
                <tr class="p-2 bg-light border">
                    <td>@itemLog.ItemName</td>
                    <td>@itemLog.Quantity</td>
                    <td>
                        @{
                            var creator = UsersService.GetById(itemLog.ApprovedBy);
                            <span>@(creator == null ? "Unknown" : creator.Username)</span>
                        }
                    </td>
                    <td>@itemLog.TakenBy</td>
                    <td>
                        <p class="small mb-0">
                            @*changing the display format for the DateTime*@
                            @itemLog.TakenOutAt.ToString("MMM dd, yyyy h:mm tt")
                        </p>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@*for displaying form for adding the item log
   it is called after the OpenAddItemLogDialog initialises the dialog details and its model
*@
@if (_showAddItemLogDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnAddItemLogDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating mb-3">
            <input id="itemName" type="text" class="form-control" @bind="_logModel.ItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
        <div class="form-floating mb-3">
            <input id="quantity" type="number" class="form-control" @bind="_logModel.Quantity" placeholder="Quantity" />
            <label for="quantity">Quantity</label>
        </div>
        <div class="form-floating mb-3">
            <input id="takenBy" type="text" class="form-control" @bind="_logModel.TakenBy" placeholder="Taken By" />
            <label for="takenBy">Taken By</label>
        </div>
        @if (!string.IsNullOrEmpty(_editItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editItemErrorMessage" />
        }
    </ModalDialog>
}

@code {
    //Global variables that can be accessed from anywhere in the class
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showAddItemLogDialog { get; set; }
    private List<InventoryLog> _logs { get; set; }
    private List<InventoryLog> _logsSortedByMonth { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editItemErrorMessage { get; set; }
    private InventoryLog _logModel { get; set; }
    private string _sortBy = "takenOutAt";
    private string _sortDirection = "ascending";
    private string _selectedMonth = "";
    private string searchTerm = "";
    private ChangeEventArgs globalSearchEventArgs = null;
    private List<String> monthsList { get; set; }


    protected override void OnInitialized()
    {
        //getting all JSON data into a List of type InventoryLog
        _logs = InventoryLogService.GetAll();

        //getting all months for populating the combobox
        monthsList = InventoryLogService.GetMonths();
    }

    //sorts the data of the table
    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    //on input of month, if the search bar is not empty, search items with the name
    private void StartItemSearch(ChangeEventArgs e)
    {
        //getting the selected month
        _selectedMonth = e.Value.ToString();

        if (_selectedMonth != "" && searchTerm != "")
        {
            //calling the method SearchTaskName
            SearchTaskName(globalSearchEventArgs);
        }
    }

    //method to search item name and display the searched data in the table
    public void SearchTaskName(ChangeEventArgs e)
    {
        globalSearchEventArgs = e;
        searchTerm = e.Value.ToString();

        //on month selected, search on the sorted month data
        if (_selectedMonth != "" && searchTerm != "")
        {
            if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
            {
                //get all sorted item log list where item name matches the search criteria
                _logs = InventoryLogService.GetAllByMonth(_selectedMonth).Where(t => t.ItemName.ToLower().Contains(searchTerm.ToLower())).ToList();
            }
            else
            {
                //display all sorted data for the selected month
                _logs = InventoryLogService.GetAllByMonth(_selectedMonth);
            }
        }

        //else search on full data
        else if (_selectedMonth == "")
        {
            if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
            {
                //checking the search criteria in all the existing log details, if found stored in _logs
                _logs = InventoryLogService.GetAll().Where(t => t.ItemName.ToLower().Contains(searchTerm.ToLower())).ToList();
            }
            else
            {
                //displaying all logs
                _logs = InventoryLogService.GetAll();
            }
        }

    }

    //for displaying dialog box for adding the item log and binding the required data
    private void OpenAddItemLogDialog()
    {
        _dialogTitle = "Item Requests";
        _dialogOkLabel = "Add";
        _logModel = new InventoryLog();
        _logModel.Id = Guid.Empty;

        //displays form in the UI
        _showAddItemLogDialog = true;
    }

    @* denotes what to be done with the captured data when the form was submitted *@
    private void OnAddItemLogDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            //on cancel pressed, close the dialog UI
            _showAddItemLogDialog = false;
        }
        else
        {
            try
            {
                _editItemErrorMessage = "";
                if (_logModel.Id == Guid.Empty)
                {
                    //creating the request log and saving the item log to the JSON file
                    _logs = InventoryLogService.Create(_globalState.CurrentUser.Id, _logModel.ItemName, _logModel.Quantity, _logModel.TakenBy);
                }
                //on success, close the dialog UI
                _showAddItemLogDialog = false;
            }
            catch (Exception e)
            {
                _editItemErrorMessage = e.Message;
            }
        }
    }
}

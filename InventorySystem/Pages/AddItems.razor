@page "/inventory"

<nav class="navbar justify-content-center bg-light">
    <h1 class="navbar-brand mb-0 h1 "> Items Available in the Inventory</h1>
</nav>
<br />

@*Creating a table and defining its row and headers*@
<table class="table">
    <thead>
        <tr class="p-2 bg-lightblue border">
            <th>
                <div class="d-flex">
                    <input type="search" class="form-control search" placeholder="Search" @oninput="SearchTaskName" />
                    <a class='btn text-@(_sortBy == "itemName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("itemName")'>
                        <span class='oi oi-sort-@(_sortBy == "itemName" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Quantity
                    <a class='btn text-@(_sortBy == "quantity" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("quantity")'>
                        <span class='oi oi-sort-@(_sortBy == "quantity" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>

            @*making the add items button and other details available only to the admin*@
            @if (UserRole == Role.Admin)
            {
                <th>
                    <div class="d-flex">
                        Added At
                        <a class='btn text-@(_sortBy == "createdAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("createdAt")'>
                            <span class='oi oi-sort-@(_sortBy == "createdAt" ? _sortDirection : "ascending")' />
                        </a>
                    </div>
                </th>
                <th>
                    <div class="d-flex mb-3">
                        Last Taken out on
                    </div>
                </th>
                <th>
                    <button class="btn btn-primary" type="button" @onclick="OpenAddItemDialog" style="float:right;">
                        <span class="oi oi-plus" /> Add Items
                    </button>
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @{

            //initialising itemList with all the JSON data
            IEnumerable<Items> itemList = _items;
            if (_sortBy == "itemName")
            {
                //sorting the data by itemName and storing into the itemList
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.ItemName) : itemList.OrderByDescending(t =>
                t.ItemName);
            }
            else if (_sortBy == "quantity")
            {
                //sorting the data by quantity and storing into the itemList
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.Quantity) : itemList.OrderByDescending(t =>
                t.Quantity);
            }
            else if (_sortBy == "createdAt")
            {
                //sorting the data by createdAt and storing into the itemList
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.CreatedAt) : itemList.OrderByDescending(t =>
                t.CreatedAt);
            }


            //looping over each item in the itemList to display each data
            foreach (var itemItem in itemList)
            {
                <tr class="p-2 bg-light border">

                    <td>@itemItem.ItemName</td>
                    <td>@itemItem.Quantity</td>


                    @*making the edit and delete button available only to the admin; also other item relating data*@
                    @if (UserRole == Role.Admin)
                    {
                        <td>
                            <p class="small mb-0">
                                @itemItem.CreatedAt.ToString("MMM dd, yyyy h:mm tt")
                            </p>
                        </td>
                        <td>
                            @*if item is just added, display last taken at to be unavailable*@
                            @if (itemItem.LastTakenAt.ToString("MMM dd, yyyy h:mm tt") == "Jan 01, 0001 12:00 AM")
                            {
                                <p class="small mb-0">-- Unavailable --</p>
                            }
                            else
                            {
                                <p class="small mb-0">@itemItem.LastTakenAt.ToString("MMM dd, yyyy h:mm tt") </p>
                            }
                        </td>
                        <td>
                            <button class="btn btn-outline-secondary" type="button" @onclick="()=>OpenEditItemDialog(itemItem)">
                                @*OpenEditItemDialog helps assign the dialog title and set the field for edit in accordance with a Object model*@
                                <span class="oi oi-pencil" /> Edit
                            </button>
                            <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteItemDialog(itemItem)">
                                <span class="oi oi-delete" /> Delete
                            </button>
                        </td>
                    }

                </tr>
            }
        }
    </tbody>
</table>

@*for displaying form for adding/editing the item in the inventory
   it is called after the OpenEditItemDialog initialises the dialog details and its model
*@
@if (_showEditItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditItemDialogClose" OkLabel="@_dialogOkLabel">
        @*OnClose denotes what to be done with the captured data*@
        <div class="form-floating mb-3">
            <input id="itemName" type="text" class="form-control" @bind="_itemModel.ItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
        <div class="form-floating mb-3">
            <input id="quantity" type="number" class="form-control" @bind="_itemModel.Quantity" placeholder="Quantity" />
            <label for="quantity">Quantity</label>
        </div>

        @if (!string.IsNullOrEmpty(_editItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editItemErrorMessage" />
        }
    </ModalDialog>
}

@*for displaying the dialog box to confirm deleting of the item in the inventory*@
@if (_showDeleteItemDialog)
{
    <ModalDialog Title="Delete Item" OnClose="@OnDeleteItemDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteItem.ItemName</strong> item?</p>
        @if (!string.IsNullOrEmpty(_deleteItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteItemErrorMessage" />
        }
    </ModalDialog>
}

@code {
    //Global variables that can be accessed from anywhere in the class
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showEditItemDialog { get; set; }
    private bool _showDeleteItemDialog { get; set; }
    private List<Items> _items { get; set; }
    private Items _deleteItem { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editItemErrorMessage { get; set; }
    private string _deleteItemErrorMessage { get; set; }
    private Items _itemModel { get; set; }
    private string _sortBy = "createdAt";
    private string _sortDirection = "ascending";

    public Role UserRole;

    protected override void OnInitialized()
    {
        _items = ItemsService.GetAll();
        UserRole = _globalState.CurrentUser.Role;
    }

    //sorts the data of the table
    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    //helps display the list of items matching the search criteria (itemName)
    private void SearchTaskName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            _items = ItemsService.GetAll().Where(t => t.ItemName.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            _items = ItemsService.GetAll();
        }
    }

    //for displaying dialog box for adding the item into the inventory and binding the required data
    private void OpenAddItemDialog()
    {
        _dialogTitle = "Add Item";
        _dialogOkLabel = "Add";
        _itemModel = new Items();
        _itemModel.Id = Guid.Empty;
        _showEditItemDialog = true;
    }


    //for displaying dialog box for editing the item present in the inventory and binding the required data
    private void OpenEditItemDialog(Items editItem)
    {
        _dialogTitle = "Edit Item";
        _dialogOkLabel = "Save";

        //storing id,name,quantity of editItem in _itemModel
        _itemModel = new Items();
        _itemModel.Id = editItem.Id;
        _itemModel.ItemName = editItem.ItemName;
        _itemModel.Quantity = editItem.Quantity;

        //displays form in the UI
        _showEditItemDialog = true;
    }

    //for binding the data for deletion and then displaying the dialog in the UI
    private void OpenDeleteItemDialog(Items itemItem)
    {
        _deleteItem = itemItem;
        _showDeleteItemDialog = true;
    }


    @* denotes what to be done with the captured data when the form was submitted *@
    private void OnEditItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditItemDialog = false;
        }
        else
        {
            try
            {
                _editItemErrorMessage = "";
                if (_itemModel.Id == Guid.Empty)
                {
                    //if the item has not been added yet, save the item to the inventory
                    _items = ItemsService.Create(_globalState.CurrentUser.Id, _itemModel.ItemName, _itemModel.Quantity);
                }
                else
                {
                    //if the item is present in the inventory, edit existing data and then save to the inventory
                    _items = ItemsService.Update(_itemModel.Id, _itemModel.ItemName, _itemModel.Quantity);
                }

                //on success, close the dialog UI
                _showEditItemDialog = false;
            }
            catch (Exception e)
            {
                _editItemErrorMessage = e.Message;
            }
        }
    }

    @* denotes what to be done when the deletion was confirmed *@
    private void OnDeleteItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showDeleteItemDialog = false;
            _deleteItem = null;
        }
        else
        {
            try
            {
                _deleteItemErrorMessage = "";
                //delete the item then close the dialog UI and free the _deleteItem variable
                _items = ItemsService.Delete(_deleteItem.Id);
                _showDeleteItemDialog = false;
                _deleteItem = null;
            }
            catch (Exception e)
            {
                _deleteItemErrorMessage = e.Message;
            }
        }
    }
}

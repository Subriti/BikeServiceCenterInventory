@page "/request-items"

<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1">Requested Items</h1>


    <button class="btn btn-primary" type="button" @onclick="OpenAddItemDialog">
        <span class="oi oi-wrench" /> Request
    </button>
</nav>

<p style="float: left">
    <span class="oi oi-eye" /> View Inventory Logs for the month of
    <select id="arrMonth" @bind="_selectedMonth">
        <option value="" disabled selected hidden>-- Select a month --</option>
        <option value="January"> January</option>
        <option value="February"> February</option>
        <option value="March"> March</option>
        <option value="April"> April</option>
        <option value="May"> May</option>
        <option value="June"> June</option>
        <option value="July"> July</option>
        <option value="August"> August</option>
        <option value="September"> September</option>
        <option value="October"> October</option>
        <option value="November"> November</option>
        <option value="December"> December</option>
    </select>
</p>

<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    <input type="search" class="form-control search" placeholder="Search" @oninput="SearchTaskName" />
                    <a class='btn text-@(_sortBy == "itemName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("itemName")'>
                        <span class='oi oi-sort-@(_sortBy == "itemName" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Quantity
                    <a class='btn text-@(_sortBy == "quantity" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("quantity")'>
                        <span class='oi oi-sort-@(_sortBy == "quantity" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Approved By
                    <a class='btn text-@(_sortBy == "approvedBy" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("approvedBy")'>
                        <span class='oi oi-sort-@(_sortBy == "approvedBy" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Taken By
                    <a class='btn text-@(_sortBy == "takenBy" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("takenBy")'>
                        <span class='oi oi-sort-@(_sortBy == "takenBy" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Taken Out At
                    <a class='btn text-@(_sortBy == "takenOutAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("takenOutAt")'>
                        <span class='oi oi-sort-@(_sortBy == "takenOutAt" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<InventoryLog> inventoryLogList = _logs;

            if (_selectedMonth != "")
            {
                _logsSortedByMonth = InventoryLogService.GetAllByMonth(_selectedMonth);
                inventoryLogList = _logsSortedByMonth;
            }

            if (_sortBy == "itemName")
            {
                inventoryLogList = _sortDirection == "ascending" ? inventoryLogList.OrderBy(t => t.ItemName) : inventoryLogList.OrderByDescending(t =>
                t.ItemName);
            }
            else if (_sortBy == "quantity")
            {
                inventoryLogList = _sortDirection == "ascending" ? inventoryLogList.OrderBy(t => t.Quantity) : inventoryLogList.OrderByDescending(t =>
                t.Quantity);
            }
            else if (_sortBy == "approvedBy")
            {
                inventoryLogList = _sortDirection == "ascending" ? inventoryLogList.OrderBy(t => t.ApprovedBy) : inventoryLogList.OrderByDescending(t =>
                t.ApprovedBy);
            }
            else if (_sortBy == "takenBy")
            {
                inventoryLogList = _sortDirection == "ascending" ? inventoryLogList.OrderBy(t => t.TakenBy) : inventoryLogList.OrderByDescending(t =>
                t.TakenBy);
            }
            else if (_sortBy == "takenOutAt")
            {
                inventoryLogList = _sortDirection == "ascending" ? inventoryLogList.OrderBy(t => t.TakenOutAt) : inventoryLogList.OrderByDescending(t =>
                t.TakenOutAt);
            }

            foreach (var itemLog in inventoryLogList)
            {
                <tr>
                    <td>@itemLog.ItemName</td>
                    <td>@itemLog.Quantity</td>
                    <td>
                        @{
                            var creator = UsersService.GetById(itemLog.ApprovedBy);
                            <span>@(creator == null ? "Unknown" : creator.Username)</span>
                        }
                    </td>
                    <td>@itemLog.TakenBy</td>
                    <td>
                        <p class="small mb-0">
                            @itemLog.TakenOutAt.ToString("MMM dd, yyyy h:mm tt")
                        </p>
                    </td>
                    <td>
                        <button class="btn btn-outline-secondary" type="button" @onclick="()=>OpenEditItemDialog(itemLog)">
                            <span class="oi oi-pencil" /> Edit
                        </button>
                        <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteItemDialog(itemLog)">
                            <span class="oi oi-delete" /> Delete
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (_showEditItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditItemDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating mb-3">
            <input id="itemName" type="text" class="form-control" @bind="_logModel.ItemName" placeholder="Item Name" />
            <label for="itemName">Item Name</label>
        </div>
        <div class="form-floating mb-3">
            <input id="quantity" type="number" class="form-control" @bind="_logModel.Quantity" placeholder="Quantity" />
            <label for="quantity">Quantity</label>
        </div>
        <div class="form-floating mb-3">
            <input id="takenBy" type="text" class="form-control" @bind="_logModel.TakenBy" placeholder="Taken By" />
            <label for="takenBy">Taken By</label>
        </div>
        @if (!string.IsNullOrEmpty(_editItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editItemErrorMessage" />
        }
        </ModalDialog>
}

@if (_showDeleteItemDialog)
{
    <ModalDialog Title="Delete Item" OnClose="@OnDeleteItemDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteItem.ItemName</strong> item log?</p>
        @if (!string.IsNullOrEmpty(_deleteItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteItemErrorMessage" />
        }
        </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showEditItemDialog { get; set; }
    private bool _showDeleteItemDialog { get; set; }
    private List<InventoryLog> _logs { get; set; }
    private List<InventoryLog> _logsSortedByMonth { get; set; }
    private InventoryLog _deleteItem { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editItemErrorMessage { get; set; }
    private string _deleteItemErrorMessage { get; set; }
    private InventoryLog _logModel { get; set; }
    private string _sortBy = "takenOutAt";
    private string _sortDirection = "ascending";
    private string _selectedMonth = "";

    protected override void OnInitialized()
    {
        _logs = InventoryLogService.GetAll();
    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    private string SelectMonth()
    {
        List<String> months = new List<String> { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
        foreach (var i in months)
        {
            return i;
        }
        return months[0];
    }

    private void OpenAddItemDialog()
    {
        _dialogTitle = "Item Requests";
        _dialogOkLabel = "Add";
        _logModel = new InventoryLog();
        _logModel.Id = Guid.Empty;
        _showEditItemDialog = true;
    }

    private void SearchTaskName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            _logs = InventoryLogService.GetAll().Where(t => t.ItemName.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            _logs = InventoryLogService.GetAll();
        }
    }

    private void OpenEditItemDialog(InventoryLog editItem)
    {
        _dialogTitle = "Edit Item Log";
        _dialogOkLabel = "Save";

        _logModel = editItem;

        _showEditItemDialog = true;
    }

    private void OpenDeleteItemDialog(InventoryLog itemItem)
    {
        _deleteItem = itemItem;
        _showDeleteItemDialog = true;
    }

    private void OnEditItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditItemDialog = false;
        }
        else
        {
            try
            {
                _editItemErrorMessage = "";
                if (_logModel.Id == Guid.Empty)
                {
                    _logs = InventoryLogService.Create(_globalState.CurrentUser.Id, _logModel.ItemName, _logModel.Quantity, _logModel.TakenBy);
                }
                else
                {
                    _logs = InventoryLogService.Update(_logModel.Id, _logModel.ItemName, _logModel.Quantity, _logModel.TakenBy);
                }
                _showEditItemDialog = false;
            }
            catch (Exception e)
            {
                _editItemErrorMessage = e.Message;
            }
        }
    }
    private void OnDeleteItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteItemDialog = false;
            _deleteItem = null;
        }
        else
        {
            try
            {
                _deleteItemErrorMessage = "";
                _logs = InventoryLogService.Delete(_deleteItem.Id);
                _showDeleteItemDialog = false;
                _deleteItem = null;
            }
            catch (Exception e)
            {
                _deleteItemErrorMessage = e.Message;
            }
        }
    }
}
